class Solution {
public:

    vector<vector<int>>dir={{1,1},{1,-1},{-1,-1},{-1,1}};
    int n,m;

    int dfs(vector<vector<int>>&grid,int i,int j,int flip,bool turn,int d){

        int i_=i+dir[d][0];
        int j_=j+dir[d][1];
        if(i_<0 || j_<0 || i_>=n || j_>=m || grid[i_][j_]!=flip){
            return 0;
        }
        int ans=0;

        int p=1+dfs(grid,i_,j_,flip == 2 ? 0 : 2,turn,d);
     
        int q=0;

        if(turn == true){
           
            q=max(p,1+dfs(grid,i_,j_,flip== 2 ? 0 : 2,false,(d+1)%4));
            
            
        }

        return max(p,q);
    }

    int lenOfVDiagonal(vector<vector<int>>& grid) {
        int ans=0;
        n=grid.size();
        m=grid[0].size();

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1){
                    for(int d=0;d<=3;d++){
                        ans=max(ans,1+dfs(grid,i,j,2,true,d));
                    }
                }
            }
        }
        return ans;
    }
};
