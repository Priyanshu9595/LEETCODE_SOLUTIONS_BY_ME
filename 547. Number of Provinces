class Solution {
public:

    void dfs(int node,vector<vector<int>>&adj,vector<int>&vis){
        vis[node]=1;

        for(auto x:adj[node]){
            if(vis[x]==-1){
                dfs(x,adj,vis);
                vis[x]=1;
            }
        }
    }

    int findCircleNum(vector<vector<int>>& isConnected) {

        int n=isConnected.size();

        vector<vector<int>>adj(n+1,vector<int>());

        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(isConnected[i][j]==1){
                    adj[i].push_back(j);
                }
            }
        }

        int  ans=0;
            vector<int>vis(n,-1);
        for(int i=0;i<n;i++){
           if(vis[i]==-1){
            ans++;
            dfs(i,adj,vis);
           }
        }

        return ans;


        
    }
};
